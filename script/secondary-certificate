. script/base-variables

if [ $# -ne 2 ]
then
	echo "Invalid argument count - the first argument specifies the base name of the secondary certificate, the second one specifies the PXF password"
	return
fi

SECONDARY_CERTIFICATE=$1
SECONDARY_CERTIFICATE_PATH=$KEY_DIRECTORY/$SECONDARY_CERTIFICATE
SECONDARY_CERTIFICATE_BASE=$SECONDARY_CERTIFICATE_PATH/$SECONDARY_CERTIFICATE
SECONDARY_CERTIFICATE_KEY=$SECONDARY_CERTIFICATE_BASE.key
SECONDARY_CERTIFICATE_REQUEST=$SECONDARY_CERTIFICATE_BASE.csr
SECONDARY_CERTIFICATE_CERTIFICATE=$SECONDARY_CERTIFICATE_BASE.crt
SECONDARY_CERTIFICATE_DER=$SECONDARY_CERTIFICATE_BASE.pxf

export OPENSSL_NAME=$SECONDARY_CERTIFICATE
export OPENSSL_BASIC_CONSTRAINTS="CA:FALSE"
export OPENSSL_COMMON_NAME=`cat $COMMON_NAME_PATH`

mkdir -p $SECONDARY_CERTIFICATE_PATH

openssl genrsa -out $SECONDARY_CERTIFICATE_KEY $OPENSSL_RSA_BITS
chmod 600 $SECONDARY_CERTIFICATE_KEY
echo -e "\n\n\n\n\n\n" | openssl req -config $OPENSSL_CONFIGURATION -new -key $SECONDARY_CERTIFICATE_KEY -out $SECONDARY_CERTIFICATE_REQUEST
yes | openssl ca -config $OPENSSL_CONFIGURATION -in $SECONDARY_CERTIFICATE_REQUEST -cert $CERTIFICATE_AUTHORITY_CERTIFICATE -keyfile $CERTIFICATE_AUTHORITY_KEY -out $SECONDARY_CERTIFICATE_CERTIFICATE -days $OPENSSL_DAYS
echo $2 | openssl pkcs12 -export -certfile $CERTIFICATE_AUTHORITY_CERTIFICATE -in $SECONDARY_CERTIFICATE_CERTIFICATE -inkey $SECONDARY_CERTIFICATE_KEY -out $SECONDARY_CERTIFICATE_DER -password stdin
